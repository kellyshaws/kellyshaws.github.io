---
layout: post
title:  "Standard PHP Library"
date:   2016-07-10 13:00:15
description: "Standard PHP Library"
permalink: post/php-spl
disqus:
  id: php-spl
categories:
- blog
- php
---

根据官方定义，SPL是"a collection of interfaces and classes that are meant to solve standard problems"。但是，目前在使用中，SPL更多地被看作是一种使object模仿array行为的interfaces和classes。


Iterator
========

SPL规定，所有实现了Iterator接口的class，都可以用在Loop中。Iterator接口中包含5个必须实现的方法：<br>

* current()

  This method returns the current index's value. You are solely responsible for tracking what the current index is as the interface does not do this for you.

* key()

  This method returns the value of the current index's key. For foreach loops this is extremely important so that the key value can be populated.

* next()

  This method moves the internal index forward one entry.

* rewind()

  This method should reset the internal index to the first element.

* valid()

  This method should return true or false if there is a current element. It is called after rewind() or next().
  

```
class ArrayReloaded implements Iterator 
{

  /**
   * A native PHP array to iterate over
   */
  private $array = array();

  /**
   * A switch to keep track of the end of the array
   */
  private $valid = FALSE;

  /**
   * Constructor
   * @param array native PHP array to iterate over
   */
  function __construct($array) 
  {
    $this->array = $array;
  }

  /**
   * Return the array "pointer" to the first element
   * PHP's reset() returns false if the array has no elements
   */
  function rewind() 
  {
    $this->valid = (FALSE !== reset($this->array));
  }

  /**
   * Return the current array element
   */
  function current() 
  {
    return current($this->array);
  }

  /**
   * Return the key of the current array element
   */
  function key() 
  {
    return key($this->array);
  }

  /**
   * Move forward by one
   * PHP's next() returns false if there are no more elements
   */
  function next() 
  {
    $this->valid = (FALSE !== next($this->array));
  }

  /**
   * Is the current element valid?
   */
  function valid() 
  {
    return $this->valid;
  }
}
```

ArrayAccess
============

实现ArrayAccess接口，可以使得object像array那样操作。ArrayAccess接口包含四个必须实现的方法：

```
* offsetExists($offset)

  This method is used to tell php if there is a value for the key specified by offset. It should return true or false.

* offsetGet($offset)

  This method is used to return the value specified by the key offset.

* offsetSet($offset, $value)

  This method is used to set a value within the object, you can throw an exception from this function for a read-only collection.

* offsetUnset($offset)

  This method is used when a value is removed from an array either through unset() or assigning the key a value of null. In the case of numerical arrays, this offset should not be deleted and the array should not be reindexed unless that is specifically the behavior you want.
```

```
/**
 * A class that can be used like an array
 */
class Article implements ArrayAccess 
{

  public $title;

  public $author;

  public $category;  

  function __construct($title,$author,$category) 
  {
    $this->title = $title;
    $this->author = $author;
    $this->category = $category;
  }

  /**
   * Defined by ArrayAccess interface
   * Set a value given it's key e.g. $A['title'] = 'foo';
   * @param mixed key (string or integer)
   * @param mixed value
   * @return void
   */
  function offsetSet($key, $value) 
  {
    if ( array_key_exists($key,get_object_vars($this)) ) {
      $this->{$key} = $value;
    }
  }

  /**
   * Defined by ArrayAccess interface
   * Return a value given it's key e.g. echo $A['title'];
   * @param mixed key (string or integer)
   * @return mixed value
   */
  function offsetGet($key) 
  {
    if ( array_key_exists($key,get_object_vars($this)) ) {
      return $this->{$key};
    }
  }

  /**
   * Defined by ArrayAccess interface
   * Unset a value by it's key e.g. unset($A['title']);
   * @param mixed key (string or integer)
   * @return void
   */
  function offsetUnset($key) 
  {
    if ( array_key_exists($key,get_object_vars($this)) ) {
      unset($this->{$key});
    }
  }

  /**
   * Defined by ArrayAccess interface
   * Check value exists, given it's key e.g. isset($A['title'])
   * @param mixed key (string or integer)
   * @return boolean
   */
  function offsetExists($offset) 
  {
    return array_key_exists($offset,get_object_vars($this));
  }
}
```

IteratorAggregate
=================

但是，虽然Article可以像数组那样操作，却无法使用foreach遍历，除非实现了前面提到的Iterator接口。另一个解决方法是，有时会需要将数据和遍历部分分开，这时就可以实现IteratorAggregate接口。它规定了一个getIterator()方法，返回一个使用Iterator接口的object。

```
class Article implements ArrayAccess, IteratorAggregate 
{

  /**
   * Defined by IteratorAggregate interface
   * Returns an iterator for for this object, for use with foreach
   * @return ArrayIterator
   */
  function getIterator() 
  {
    return new ArrayIterator($this);
  }
 ```

RecursiveIterator
================

 这个接口用于遍历多层数据，它继承了Iterator接口，因而也具有标准的current()、key()、next()、 rewind()和valid()方法。同时，它自己还规定了getChildren()和hasChildren()方法。The getChildren() method must return an object that implements RecursiveIterator.

SeekableIterator
================

 SeekableIterator接口也是Iterator接口的延伸，除了Iterator的5个方法以外，还规定了seek()方法，参数是元素的位置，返回该元素。如果该位置不存在，则抛出OutOfBoundsException。

 ```
 class PartyMemberIterator implements SeekableIterator 
 {

    public function __construct(PartyMember $member)
     {
        // Store $member locally for iteration
    }

    public function seek($index) 
    {
        $this->rewind();
        $position = 0;
        while ($position < $index && $this->valid()) {
            $this->next();
            $position++;
        }
        if (!$this->valid()) {
            throw new OutOfBoundsException('Invalid position');
        }
    }

    // Implement current(), key(), next(), rewind()
    // and valid() to iterate over data in $member
 }
```

Countable
=========

这个接口规定了一个count()方法，返回结果集的数量。

SPL除了定义一系列接口以外，还提供一系列的内置类，它们对应不同的任务，大大简化了编程。

```
// a simple foreach() to traverse the SPL class names
foreach(spl_classes() as $key=>$value) {
    echo $key.' -&gt; '.$value.'<br />';
}
```

DirectoryIterator
================

这个类用来查看一个目录中的所有文件和子目录：

```
try{
  /*** class create new DirectoryIterator Object ***/
    foreach ( new DirectoryIterator('./') as $Item ) {
        echo $Item.'<br />';
    }
}
/*** if an exception is thrown, catch it here ***/
catch(Exception $e) {
    echo 'No files Found!<br />';
}
```

```
function scanDirectory($path) 
{
  foreach (new DirectoryIterator($path) as $fileInfo) {
    if ($fileInfo->isFile())
        echo $fileInfo->getFilename() . "<br>\n"; 
      else if(!$fileInfo->isDot()) {
        scanDirectory($path.DIRECTORY_SEPARATOR.$fileInfo->__toString ());
      } else {
        continue;
      }

  }
}

scanDirectory("./picture");
```

```
foreach(new DirectoryIterator('./' ) as $file ) {
  if( $file->getFilename()  == 'foo.txt' ) {
    echo '<tr><td>getFilename()</td><td> '; var_dump($file->getFilename()); echo '</td></tr>';
    echo '<tr><td>getBasename()</td><td> '; var_dump($file->getBasename()); echo '</td></tr>';
    echo '<tr><td>isDot()</td><td> '; var_dump($file->isDot()); echo '</td></tr>';
    echo '<tr><td>__toString()</td><td> '; var_dump($file->__toString()); echo '</td></tr>';
    echo '<tr><td>getPath()</td><td> '; var_dump($file->getPath()); echo '</td></tr>';
    echo '<tr><td>getPathname()</td><td> '; var_dump($file->getPathname()); echo '</td></tr>';
    echo '<tr><td>getPerms()</td><td> '; var_dump($file->getPerms()); echo '</td></tr>';
    echo '<tr><td>getInode()</td><td> '; var_dump($file->getInode()); echo '</td></tr>';
    echo '<tr><td>getSize()</td><td> '; var_dump($file->getSize()); echo '</td></tr>';
    echo '<tr><td>getOwner()</td><td> '; var_dump($file->getOwner()); echo '</td></tr>';
    echo '<tr><td>$file->getGroup()</td><td> '; var_dump($file->getGroup()); echo '</td></tr>';
    echo '<tr><td>getATime()</td><td> '; var_dump($file->getATime()); echo '</td></tr>';
    echo '<tr><td>getMTime()</td><td> '; var_dump($file->getMTime()); echo '</td></tr>';
    echo '<tr><td>getCTime()</td><td> '; var_dump($file->getCTime()); echo '</td></tr>';
    echo '<tr><td>getType()</td><td> '; var_dump($file->getType()); echo '</td></tr>';
    echo '<tr><td>isWritable()</td><td> '; var_dump($file->isWritable()); echo '</td></tr>';
    echo '<tr><td>isReadable()</td><td> '; var_dump($file->isReadable()); echo '</td></tr>';
    echo '<tr><td>isExecutable(</td><td> '; var_dump($file->isExecutable()); echo '</td></tr>';
    echo '<tr><td>isFile()</td><td> '; var_dump($file->isFile()); echo '</td></tr>';
    echo '<tr><td>isDir()</td><td> '; var_dump($file->isDir()); echo '</td></tr>';
    echo '<tr><td>isLink()</td><td> '; var_dump($file->isLink()); echo '</td></tr>';
    echo '<tr><td>getFileInfo()</td><td> '; var_dump($file->getFileInfo()); echo '</td></tr>';
    echo '<tr><td>getPathInfo()</td><td> '; var_dump($file->getPathInfo()); echo '</td></tr>';
    echo '<tr><td>openFile()</td><td> '; var_dump($file->openFile()); echo '</td></tr>';
    echo '<tr><td>setFileClass()</td><td> '; var_dump($file->setFileClass()); echo '</td></tr>';
    echo '<tr><td>setInfoClass()</td><td> '; var_dump($file->setInfoClass()); echo '</td></tr>';
  }
}
```

ArrayObject
===========

这个类可以将Array转化为object。

```
/*** a simple array ***/
$array = array('koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'kiwi', 'kookaburra', 'platypus');

/*** create the array object ***/
$arrayObj = new ArrayObject($array);

/*** iterate over the array ***/
for($iterator = $arrayObj->getIterator();
   /*** check if valid ***/
   $iterator->valid();
   /*** move to the next array member ***/
   $iterator->next()) {
    /*** output the key and current array value ***/
    echo $iterator->key() . ' => ' . $iterator->current() . '<br />';
}

//增加一个元素
$arrayObj->append('dingo');

//对元素排序
$arrayObj->natcasesort();

//显示元素的数量
echo $arrayObj->count();

//删除一个元素
$arrayObj->offsetUnset(5);

//某一个元素是否存在
if ($arrayObj->offsetExists(3)) {
  echo 'Offset Exists<br />';
}

//更改某个位置的元素值
$arrayObj->offsetSet(5, "galah");

//显示某个位置的元素值
echo $arrayObj->offsetGet(4);
```

ArrayIterator
=============

这个类实际上是对ArrayObject类的补充，为后者提供遍历功能。

```
$array = array('koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'kiwi', 'kookaburra', 'platypus');

try {
    $object = new ArrayIterator($array);
    foreach($object as $key=>$value) {
      echo $key.' => '.$value.'<br />';
    }
} catch (Exception $e) {
  echo $e->getMessage();
}
```

ArrayIterator类也支持offset类方法和count()方法：

```
/*** a simple array ***/
$array = array('koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'kiwi', 'kookaburra', 'platypus');

try {
  $object = new ArrayIterator($array);
  /*** check for the existence of the offset 2 ***/
  if($object->offSetExists(2)) {
    /*** set the offset of 2 to a new value ***/
    $object->offSetSet(2, 'Goanna');
  }
  /*** unset the kiwi ***/
  foreach($object as $key=>$value) {
    /*** check the value of the key ***/
    if($object->offSetGet($key) === 'kiwi') {
      /*** unset the current key ***/
      $object->offSetUnset($key);
    }
    echo '<li>'.$key.' - '.$value.'</li>'."\n";
  }
} catch (Exception $e) {
  echo $e->getMessage();
}
```

RecursiveArrayIterator和RecursiveIteratorIterator
================================================

ArrayIterator类和ArrayObject类，只支持遍历一维数组。如果要遍历多维数组，必须先用RecursiveIteratorIterator生成一个Iterator，然后再对这个Iterator使用RecursiveIteratorIterator。

```
$array = array(
    array('name'=>'butch', 'sex'=>'m', 'breed'=>'boxer'),
    array('name'=>'fido', 'sex'=>'m', 'breed'=>'doberman'),
    array('name'=>'girly','sex'=>'f', 'breed'=>'poodle')
);

foreach(new RecursiveIteratorIterator(new RecursiveArrayIterator($array)) 
  as 
  $key=>$value
) {
  echo $key.' -- '.$value.'<br />';
}
```

FilterIterator
==============

FilterIterator类可以对元素进行过滤，只要在accept()方法中设置过滤条件就可以了。

```
/*** a simple array ***/
$animals = array('koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'NZ'=>'kiwi', 'kookaburra', 'platypus');

class CullingIterator extends FilterIterator 
{

  /*** The filteriterator takes  a iterator as param: ***/
  public function __construct( Iterator $it ) 
  {
    parent::__construct( $it );
  }

  /*** check if key is numeric ***/
  function accept() 
  {
    return is_numeric($this->key());
  }

}/*** end of class ***/
$cull = new CullingIterator(new ArrayIterator($animals));

foreach($cull as $key=>$value) {
  echo $key.' == '.$value.'<br />';
}
```

SimpleXMLIterator
================

这个类用来遍历xml文件

```
/*** a simple xml tree ***/
 $xmlstring = <<<XML
<?xml version = "1.0" encoding="UTF-8" standalone="yes"?>
<document>
  <animal>
    <category id="26">
      <species>Phascolarctidae</species>
      <type>koala</type>
      <name>Bruce</name>
    </category>
  </animal>
  <animal>
    <category id="27">
      <species>macropod</species>
      <type>kangaroo</type>
      <name>Bruce</name>
    </category>
  </animal>
  <animal>
    <category id="28">
      <species>diprotodon</species>
      <type>wombat</type>
      <name>Bruce</name>
    </category>
  </animal>
  <animal>
    <category id="31">
      <species>macropod</species>
      <type>wallaby</type>
      <name>Bruce</name>
    </category>
  </animal>
  <animal>
    <category id="21">
      <species>dromaius</species>
      <type>emu</type>
      <name>Bruce</name>
    </category>
  </animal>
  <animal>
    <category id="22">
      <species>Apteryx</species>
      <type>kiwi</type>
      <name>Troy</name>
    </category>
  </animal>
  <animal>
    <category id="23">
      <species>kingfisher</species>
      <type>kookaburra</type>
      <name>Bruce</name>
    </category>
  </animal>
  <animal>
    <category id="48">
      <species>monotremes</species>
      <type>platypus</type>
      <name>Bruce</name>
    </category>
  </animal>
  <animal>
    <category id="4">
      <species>arachnid</species>
      <type>funnel web</type>
      <name>Bruce</name>
      <legs>8</legs>
    </category>
  </animal>
</document>
XML;

/*** a new simpleXML iterator object ***/
try {
  /*** a new simple xml iterator ***/
  $it = new SimpleXMLIterator($xmlstring);
  /*** a new limitIterator object ***/
  foreach(new RecursiveIteratorIterator($it,1) as $name => $data) {
    echo $name.' -- '.$data.'<br />';
  }
} catch(Exception $e) {
  echo $e->getMessage();
}
```

new RecursiveIteratorIterator($it,1)表示显示所有包括父元素在内的子元素。 <br>
显示某一个特定的元素值，可以这样写：<br>

```
try {
  /*** a new simpleXML iterator object ***/
  $sxi =  new SimpleXMLIterator($xmlstring);
  foreach ( $sxi as $node ) {
    foreach($node as $k=>$v) {
      echo $v->species.'<br />';
    }
  }
} catch(Exception $e) {
  echo $e->getMessage();
}
```

CachingIterator
================

这个类有一个hasNext()方法，用来判断是否还有下一个元素。

```
/*** a simple array ***/
$array = array('koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'kiwi', 'kookaburra', 'platypus');

try {
  /*** create a new object ***/
  $object = new CachingIterator(new ArrayIterator($array));
  foreach($object as $value) {
    echo $value;
    if($object->hasNext()){
      echo ',';
    }
  }
} catch (Exception $e) {
  echo $e->getMessage();
}
```

LimitIterator
=============

这个类用来限定返回结果集的数量和位置，必须提供offset和limit两个参数，与SQL命令中limit语句类似

```
$offset = 3;

/*** the limit of records to show ***/
$limit = 2;

$array = array('koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'kiwi', 'kookaburra', 'platypus');

$it = new LimitIterator(new ArrayIterator($array), $offset, $limit);

foreach($it as $k=>$v) {
  echo $it->getPosition().'<br />';
}
```

SplFileObject
=============

这个类用来对文本文件进行遍历

```
try{
  // iterate directly over the object
  foreach( new SplFileObject(&quot;/usr/local/apache/logs/access_log&quot;) as $line)
  // and echo each line of the file
  echo $line.'<br />';
} catch (Exception $e) {
  echo $e->getMessage();
}
```
