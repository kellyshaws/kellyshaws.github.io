---
layout: post
title:  "From Apprentice To Artisan --应用程序结构"
date:   2016-04-21 14:30:15
description: "From Apprentice To Artisan --Application Structure"
permalink: post/application-structure
disqus:
  id: application-structure
categories:
- blog
- php
- laravel
---

这个类要写到哪儿？这是一个在用框架写应用程序时十分常见的问题。大量的开发人员都有这个疑问。他们被灌输Model就是Database，在控制器里面处理HTTP请求，在模型里操作数据库，视图里包含了要显示的HTML。不过，发送电子邮件的类要写到哪儿？数据验证的类要写到哪儿？调用外部API的类要写到哪儿？在这一章节，我们将学习如何写结构优美的Laravel应用，打破长久以来掣肘开发人员的普遍思维惯性这个拦路虎，最终做出好的设计。<br>

##MVC是慢性谋杀##

为了做出好的程序设计，最大的拦路虎就是一个简单的缩写词：
M-V-C。模型、视图、控制器主宰了Web框架的思想已经好多年了。这种思想的流行某种程度上是托了Ruby on Rails愈加流行的福。然而，如果你问一个开发人员模型的定义是什么。通常你会听到他嘟哝着什么数据库之类的东西。这么说，模型就是数据库了。不管这意味着什么，模型里包含了关于数据库的一切。但是，你很快就会知道，你的应用程序需要的不仅仅是一个简单的数据库访问类。他需要更多的逻辑如：数据验证、调用外部服务、发送电子邮件，等等更多。<br>

<blockquote>
	<p>
		模型是啥？<br>

		单词"model"的含义太模糊了，很难说行具体的含义。更具体来讲，模型是用来将我们的应用划分成更小、更清晰的类，使得各代码部分有着明确的权责。<br>
	</p>
</blockquote>

所以怎么解决这个问题呢？很多开发者开始将业务逻辑包装到控制器里面。当控制器庞大到一定规模，他们将会需要重用业务逻辑。大部分开发人员没有将这些业务逻辑提取到别的类里面，而是错误的臆想他们需要在控制器里面调用别的控制器。这种模式通常被称为"HMVC"。不幸的是，这种模式通常也预示着糟糕的程序设计，并且控制器已经太复杂了。<br>

<blockquote>
	<p>
		HMVC预示着糟糕的设计<br>

		你觉得需要在控制器里面调用其他的控制器？这通常预示着糟糕的程序设计并且你的控制器里面业务逻辑太多了。把业务逻辑抽出来放到一个新的类里面，这样你就可以在其他任何控制器里面调用了。<br>
	</p>
</blockquote>

有一种更好的程序结构。但首先我们要忘掉以往我们被灌输的关于model的一切。干脆点，让我们直接删掉model目录，重新开始吧！<br>